// Test string literals
let s1 = "hello";
let s2 = 'world';
assert(s1 == "hello");
assert(s2 == 'world');

// Test string concatenation
let s3 = s1 + " " + s2;
assert(s3 == "hello world");

// Test string length
assert(s1.len == 5);
assert(s2.len == 5);
assert(s3.len == 11);
assert("".len == 0);

// Test byte_at
assert("abc".byte_at(0) == 97);
assert("abc".byte_at(1) == 98);
assert("abc".byte_at(2) == 99);

// Test fromcodepoint
assert(String.from_codepoint(97) == 'a');
assert(String.from_codepoint('b'.byte_at(0)) == 'b');
assert('7' + String.from_codepoint('7'.byte_at(0)) == '77');

// Test parse_int
assert("123".parse_int(10) == 123);
assert("-45".parse_int(10) == -45);
assert("ff".parse_int(16) == 255);
assert("FF".parse_int(16) == 255);
assert("101".parse_int(2) == 5);
assert("".parse_int(10) == nil);
assert("not a number".parse_int(10) == nil);
assert(" 0".parse_int(2) == nil);
assert("0 ".parse_int(2) == nil);

// Test trim
assert("  hello  ".trim() == "hello");
assert("\n world   \n   ".trim() == "world");
assert("no spaces".trim() == "no spaces");

// Test string comparison
assert("a" == "a");
assert("a" != "b");
assert("a" < "b");
assert("b" > "a");
assert("a" <= "a");
assert("a" <= "b");
assert("b" >= "a");
assert("b" >= "b");

// Test to_s methods
assert("foo".to_s() == "foo");
assert((123).to_s() == "123");
assert((-45.5).to_s() == "-45.5");
//assert(true.to_s() == "true");
//assert(false.to_s() == "false");
//assert(nil.to_s() == "nil");

$println("string tests passed");
